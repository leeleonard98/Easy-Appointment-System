
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CustomerAppointmentWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CustomerAppointmentWebService {


    /**
     * 
     * @return
     *     returns java.util.List<ws.client.BusinessCategoryEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllBusinessCategories", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllBusinessCategories")
    @ResponseWrapper(localName = "retrieveAllBusinessCategoriesResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllBusinessCategoriesResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveAllBusinessCategoriesRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveAllBusinessCategoriesResponse")
    public List<BusinessCategoryEntity> retrieveAllBusinessCategories();

    /**
     * 
     * @param password
     * @param email
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws InvalidLoginException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveCustomerAppointments", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerAppointments")
    @ResponseWrapper(localName = "retrieveCustomerAppointmentsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerAppointmentsResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveCustomerAppointmentsRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveCustomerAppointmentsResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveCustomerAppointments/Fault/CustomerNotFoundException"),
        @FaultAction(className = InvalidLoginException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveCustomerAppointments/Fault/InvalidLoginException")
    })
    public List<AppointmentEntity> retrieveCustomerAppointments(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws CustomerNotFoundException_Exception, InvalidLoginException_Exception
    ;

    /**
     * 
     * @param password
     * @param email
     * @return
     *     returns ws.client.CustomerEntity
     * @throws InvalidLoginException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "customerLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLogin")
    @ResponseWrapper(localName = "customerLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLoginResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/customerLoginRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/customerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/customerLogin/Fault/InvalidLoginException")
    })
    public CustomerEntity customerLogin(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginException_Exception
    ;

    /**
     * 
     * @param newCustomerEntity
     * @throws InputDataValidationException_Exception
     * @throws CustomerAlreadyExistsException_Exception
     * @throws UnknownPersistenceException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "registerCustomer", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RegisterCustomer")
    @ResponseWrapper(localName = "registerCustomerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RegisterCustomerResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/registerCustomerRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/registerCustomerResponse", fault = {
        @FaultAction(className = CustomerAlreadyExistsException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/registerCustomer/Fault/CustomerAlreadyExistsException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/registerCustomer/Fault/InputDataValidationException"),
        @FaultAction(className = UnknownPersistenceException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/registerCustomer/Fault/UnknownPersistenceException")
    })
    public void registerCustomer(
        @WebParam(name = "newCustomerEntity", targetNamespace = "")
        CustomerEntity newCustomerEntity)
        throws CustomerAlreadyExistsException_Exception, InputDataValidationException_Exception, UnknownPersistenceException_Exception
    ;

    /**
     * 
     * @param providerId
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws ServiceProviderNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderAppointments", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderAppointments")
    @ResponseWrapper(localName = "retrieveServiceProviderAppointmentsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderAppointmentsResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderAppointmentsRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderAppointmentsResponse", fault = {
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderAppointments/Fault/ServiceProviderNotFoundException")
    })
    public List<AppointmentEntity> retrieveServiceProviderAppointments(
        @WebParam(name = "providerId", targetNamespace = "")
        Long providerId)
        throws ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param city
     * @param categoryId
     * @return
     *     returns java.util.List<ws.client.ServiceProviderEntity>
     * @throws BusinessCategoryNotFoundException_Exception
     * @throws ServiceProviderNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProvidersByCategoryIdAndCity", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProvidersByCategoryIdAndCity")
    @ResponseWrapper(localName = "retrieveServiceProvidersByCategoryIdAndCityResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProvidersByCategoryIdAndCityResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProvidersByCategoryIdAndCityRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProvidersByCategoryIdAndCityResponse", fault = {
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProvidersByCategoryIdAndCity/Fault/ServiceProviderNotFoundException"),
        @FaultAction(className = BusinessCategoryNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProvidersByCategoryIdAndCity/Fault/BusinessCategoryNotFoundException")
    })
    public List<ServiceProviderEntity> retrieveServiceProvidersByCategoryIdAndCity(
        @WebParam(name = "categoryId", targetNamespace = "")
        Long categoryId,
        @WebParam(name = "city", targetNamespace = "")
        String city)
        throws BusinessCategoryNotFoundException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param providerId
     * @param email
     * @param newAppointmentEntity
     * @throws InvalidLoginException_Exception
     * @throws CustomerNotFoundException_Exception
     * @throws CreateNewAppointmentEntityException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addAppointment", targetNamespace = "http://ws.session.ejb/", className = "ws.client.AddAppointment")
    @ResponseWrapper(localName = "addAppointmentResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.AddAppointmentResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/addAppointmentRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/addAppointmentResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/addAppointment/Fault/CustomerNotFoundException"),
        @FaultAction(className = InvalidLoginException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/addAppointment/Fault/InvalidLoginException"),
        @FaultAction(className = CreateNewAppointmentEntityException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/addAppointment/Fault/CreateNewAppointmentEntityException")
    })
    public void addAppointment(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "providerId", targetNamespace = "")
        Long providerId,
        @WebParam(name = "newAppointmentEntity", targetNamespace = "")
        AppointmentEntity newAppointmentEntity)
        throws CreateNewAppointmentEntityException_Exception, CustomerNotFoundException_Exception, InvalidLoginException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentNo
     * @param email
     * @throws InvalidLoginException_Exception
     * @throws AppointmentNotFoundException_Exception
     * @throws CustomerNotFoundException_Exception
     * @throws UnauthorisedOperationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cancelAppointment", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CancelAppointment")
    @ResponseWrapper(localName = "cancelAppointmentResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CancelAppointmentResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointmentRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointmentResponse", fault = {
        @FaultAction(className = InvalidLoginException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointment/Fault/InvalidLoginException"),
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointment/Fault/CustomerNotFoundException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointment/Fault/AppointmentNotFoundException"),
        @FaultAction(className = UnauthorisedOperationException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/cancelAppointment/Fault/UnauthorisedOperationException")
    })
    public void cancelAppointment(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentNo", targetNamespace = "")
        Long appointmentNo)
        throws AppointmentNotFoundException_Exception, CustomerNotFoundException_Exception, InvalidLoginException_Exception, UnauthorisedOperationException_Exception
    ;

    /**
     * 
     * @param password
     * @param providerId
     * @param rating
     * @param email
     * @throws InvalidLoginException_Exception
     * @throws ServiceProviderNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "rateServiceProvider", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RateServiceProvider")
    @ResponseWrapper(localName = "rateServiceProviderResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RateServiceProviderResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/rateServiceProviderRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/rateServiceProviderResponse", fault = {
        @FaultAction(className = InvalidLoginException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/rateServiceProvider/Fault/InvalidLoginException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/rateServiceProvider/Fault/ServiceProviderNotFoundException")
    })
    public void rateServiceProvider(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "providerId", targetNamespace = "")
        Long providerId,
        @WebParam(name = "rating", targetNamespace = "")
        Integer rating)
        throws InvalidLoginException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param providerId
     * @return
     *     returns ws.client.ServiceProviderEntity
     * @throws ServiceProviderNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderByProviderId", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderByProviderId")
    @ResponseWrapper(localName = "retrieveServiceProviderByProviderIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderByProviderIdResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderByProviderIdRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderByProviderIdResponse", fault = {
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveServiceProviderByProviderId/Fault/ServiceProviderNotFoundException")
    })
    public ServiceProviderEntity retrieveServiceProviderByProviderId(
        @WebParam(name = "providerId", targetNamespace = "")
        Long providerId)
        throws ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param appointmentNo
     * @return
     *     returns ws.client.AppointmentEntity
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentByAppointmentNo", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentNo")
    @ResponseWrapper(localName = "retrieveAppointmentByAppointmentNoResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentNoResponse")
    @Action(input = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveAppointmentByAppointmentNoRequest", output = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveAppointmentByAppointmentNoResponse", fault = {
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerAppointmentWebService/retrieveAppointmentByAppointmentNo/Fault/AppointmentNotFoundException")
    })
    public AppointmentEntity retrieveAppointmentByAppointmentNo(
        @WebParam(name = "appointmentNo", targetNamespace = "")
        Long appointmentNo)
        throws AppointmentNotFoundException_Exception
    ;

}
